{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ico.js","webpack:///webpack/bootstrap 3682cdec1e62df6adea1","webpack:///(webpack)/buildin/global.js","webpack:///./src/is-ico.js","webpack:///./src/utils/bit-array.js","webpack:///./src/utils/buffer-to-arraybuffer.js","webpack:///./src/utils/range.js","webpack:///./src/utils/to-dividable-by-4.js","webpack:///./src/browser/is-ico.js","webpack:///./src/browser/parse.js","webpack:///./src/bit-depth-of-png.js","webpack:///./src/browser/image.js","webpack:///./src/browser/index.js","webpack:///./src/get-image-data.js","webpack:///./src/is-cur.js","webpack:///./src/is-png.js","webpack:///./src/parse-bmp.js","webpack:///./src/parse-ico.js","webpack:///./~/base64-js/index.js","webpack:///./~/buffer/index.js","webpack:///./~/ieee754/index.js","webpack:///./~/isarray/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","g","Function","eval","e","window","bufferToArrayBuffer","isICO","buffer","arrayBuffer","dataView","DataView","getUint16","bitArray","of1","buff","Uint8Array","bit","byteLength","toString","slice","split","map","el","parseInt","of4","of8","Array","from","Buffer","isBuffer","ArrayBuffer","isView","range","fill","_","toDividableBy4","num","rest","Image","parseICO","parse","mime","bitDepthOfPNG","getUint8","colorType","dataURLToArrayBuffer","dataURL","string","atob","replace","view","length","charCodeAt","decode","Promise","resolve","url","URL","createObjectURL","Blob","img","document","createElement","src","onload","width","naturalWidth","height","naturalHeight","canvas","ctx","getContext","drawImage","imageData","getImageData","data","encode","image","createImageData","dataData","putImageData","toDataURL","global","globalICO","ICO","noConflict","getImageData24bit","bitmap","Uint8ClampedArray","xor","and","bytepp","xorLine","andLine","h","w","index","set","getImageData32bit","hasAlpha","every","getImageDataPalette","color","colors","isCUR","isPNG","getUint32","parseBMP","headerSize","colorsCount","xorOffset","andOffset","offset","assign","reject","TypeError","Error","count","infoHeaders","iconImages","infoHeader","parseIconImage","iconImage","then","icos","hotspot","x","y","imageBuffer","all","placeHoldersCount","b64","len","toByteArray","j","tmp","placeHolders","arr","Arr","L","revLookup","tripletToBase64","lookup","encodeChunk","uint8","start","end","output","push","join","fromByteArray","extraBytes","parts","len2","code","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","encoding","undefined","checked","isEncoding","actual","write","fromArrayLike","array","byteOffset","obj","copy","isnan","type","isArray","SlowBuffer","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","hi","lo","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","Symbol","species","allocUnsafeSlow","_isBuffer","compare","a","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2"],"mappings":"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","file":"ico.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ICO\"] = factory();\n\telse\n\t\troot[\"ICO\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * icojs v0.7.2\n * (c) egy186\n * https://github.com/egy186/icojs/blob/master/LICENSE\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ICO\"] = factory();\n\telse\n\t\troot[\"ICO\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bufferToArrayBuffer = __webpack_require__(3);\n\n/**\n * Check the ArrayBuffer is valid ICO.\n * @memberof ICO\n * @param {ArrayBuffer|Buffer} buffer ICO file data.\n * @returns {Boolean} True if arg is ICO.\n */\nvar isICO = function isICO(buffer) {\n  var arrayBuffer = bufferToArrayBuffer(buffer);\n  if (!arrayBuffer) {\n    return false;\n  }\n  var dataView = new DataView(arrayBuffer);\n  return dataView.getUint16(0, true) === 0 && dataView.getUint16(2, true) === 1;\n};\n\nmodule.exports = isICO;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitArray = {\n  /**\n   * Convert ArrayBuffer to 1bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of1: function of1(buffer) {\n    var buff = new Uint8Array(buffer);\n    var bit = '';\n    for (var i = 0; i < buff.byteLength; i++) {\n      bit += ('000000000' + buff[i].toString(2)).slice(-8);\n    }\n    return bit.split('').map(function (el) {\n      return parseInt(el, 2);\n    });\n  },\n\n  /**\n   * Convert ArrayBuffer to 4bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of4: function of4(buffer) {\n    var buff = new Uint8Array(buffer);\n    var bit = '';\n    for (var i = 0; i < buff.byteLength; i++) {\n      bit += ('00' + buff[i].toString(16)).slice(-2);\n    }\n    return bit.split('').map(function (el) {\n      return parseInt(el, 16);\n    });\n  },\n\n  /**\n   * Convert ArrayBuffer to 8bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of8: function of8(buffer) {\n    var buff = new Uint8Array(buffer);\n    return Array.from(buff);\n  }\n};\n\nmodule.exports = bitArray;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Buffer) {\n\nvar bufferToArrayBuffer = function bufferToArrayBuffer(buffer) {\n  if (Buffer.isBuffer(buffer)) {\n    return new Uint8Array(buffer).buffer;\n  }\n  if (ArrayBuffer.isView(buffer)) {\n    return buffer.buffer;\n  }\n  if (buffer instanceof ArrayBuffer) {\n    return buffer;\n  }\n  return false;\n};\n\nmodule.exports = bufferToArrayBuffer;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar range = function range(n) {\n  return new Array(n).fill(0).map(function (_, i) {\n    return i;\n  });\n};\n\nmodule.exports = range;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Make number dividable by 4\n * @access private\n * @param {Number} num number\n * @returns {Number} number dividable by 4\n */\n\nvar toDividableBy4 = function toDividableBy4(num) {\n  var rest = num % 4;\n  return num % 4 === 0 ? num : num + 4 - rest;\n};\n\nmodule.exports = toDividableBy4;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = __webpack_require__(1);\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Image = __webpack_require__(9);\nvar parseICO = __webpack_require__(15);\n\nvar parse = function parse(arrayBuffer, mime) {\n  return parseICO(arrayBuffer, mime, Image);\n};\n\nmodule.exports = parse;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitDepthOfPNG = function bitDepthOfPNG(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var bit = dataView.getUint8(24);\n  var colorType = dataView.getUint8(25);\n  if (colorType === 2) {\n    return bit * 3;\n  } else if (colorType === 4) {\n    return bit * 2;\n  } else if (colorType === 6) {\n    return bit * 4;\n  }\n  return bit;\n};\n\nmodule.exports = bitDepthOfPNG;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar dataURLToArrayBuffer = function dataURLToArrayBuffer(dataURL) {\n  var string = atob(dataURL.replace(/.+,/, ''));\n  var view = new Uint8Array(string.length);\n  for (var i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nvar Image = {\n  /**\n   * Create imageData from image\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer image buffer\n   * @returns {ImageData} imageData\n   */\n  decode: function decode(arrayBuffer) {\n    return new Promise(function (resolve) {\n      var url = URL.createObjectURL(new Blob([arrayBuffer]));\n      var img = document.createElement('img');\n      img.src = url;\n      img.onload = function () {\n        var width = img.naturalWidth;\n        var height = img.naturalHeight;\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        var imageData = ctx.getImageData(0, 0, width, height);\n        resolve({\n          width: imageData.width,\n          height: imageData.height,\n          data: imageData.data\n        });\n      };\n    });\n  },\n\n  /**\n   * Create image from imgData.data\n   * @access private\n   * @param {Object} image data\n   * @param {Number} image.width img width\n   * @param {Number} image.height img height\n   * @param {Uint8ClampedArray} image.data same as imageData.data\n   * @param {String} [mime=image/png] MIME type\n   * @returns {ArrayBuffer} image\n   */\n  encode: function encode(image, mime) {\n    return new Promise(function (resolve) {\n      var data = image.data;\n      var canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var ctx = canvas.getContext('2d');\n      var imageData = ctx.createImageData(image.width, image.height);\n      var dataData = imageData.data;\n      for (var i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime || 'image/png')));\n    });\n  }\n};\n\nmodule.exports = Image;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nvar isICO = __webpack_require__(6);\nvar parse = __webpack_require__(7);\n\nvar globalICO = global.ICO;\n\nvar ICO = {\n  isICO: isICO,\n  /**\n   * No conflict.\n   * @memberof ICO\n   * @returns {ICO} `ICO` Object.\n   */\n  noConflict: function noConflict() {\n    global.ICO = globalICO;\n    return this;\n  },\n\n  parse: parse\n};\n\nmodule.exports = ICO;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitArray = __webpack_require__(2);\nvar toDividableBy4 = __webpack_require__(5);\n\n/**\n * Get imageData of 24bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nvar getImageData24bit = function getImageData24bit(bitmap) {\n  var width = bitmap.width;\n  var height = bitmap.height;\n  var data = new Uint8ClampedArray(width * height * 4);\n\n  var xor = new Uint8Array(bitmap.xor);\n  var and = bitArray.of1(bitmap.and);\n  var bytepp = bitmap.bit / 8;\n  var xorLine = toDividableBy4(width * bytepp);\n  var andLine = toDividableBy4(width / 8) * 8;\n  var dataOffset = function dataOffset(w, h) {\n    return ((height - h - 1) * width + w) * 4;\n  };\n  for (var h = 0; h < height; h++) {\n    for (var w = 0; w < width; w++) {\n      var index = h * xorLine + w * bytepp;\n      data.set([xor[index + 2], xor[index + 1], xor[index], and[h * andLine + w] ? 0 : 255], dataOffset(w, h));\n    }\n  }\n  return {\n    data: data,\n    height: height,\n    width: width\n  };\n};\n\n/**\n * Get imageData of 32bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nvar getImageData32bit = function getImageData32bit(bitmap) {\n  var width = bitmap.width;\n  var height = bitmap.height;\n  var data = new Uint8ClampedArray(width * height * 4);\n\n  var xor = new Uint8Array(bitmap.xor);\n  var hasAlpha = !bitArray.of8(xor).every(function (n, index) {\n    if ((index + 1) % 4 === 0) {\n      return n === 0; // A\n    }\n    return true; // RGB\n  });\n  var and = bitArray.of1(bitmap.and);\n  var bytepp = bitmap.bit / 8;\n  var xorLine = toDividableBy4(width * bytepp);\n  var andLine = toDividableBy4(width / 8) * 8;\n  var dataOffset = function dataOffset(w, h) {\n    return ((height - h - 1) * width + w) * 4;\n  };\n  for (var h = 0; h < height; h++) {\n    for (var w = 0; w < width; w++) {\n      var index = h * xorLine + w * bytepp;\n      data.set([xor[index + 2], xor[index + 1], xor[index], hasAlpha ? xor[index + 3] : and[h * andLine + w] ? 0 : 255 // eslint-disable-line no-nested-ternary\n      ], dataOffset(w, h));\n    }\n  }\n  return {\n    data: data,\n    height: height,\n    width: width\n  };\n};\n\n/**\n * Get imageData of 1, 4, 8bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nvar getImageDataPalette = function getImageDataPalette(bitmap) {\n  var width = bitmap.width;\n  var height = bitmap.height;\n  var data = new Uint8ClampedArray(width * height * 4);\n\n  var xor = bitArray['of' + bitmap.bit](bitmap.xor);\n  var and = bitArray.of1(bitmap.and);\n  var xorLine = toDividableBy4(width * bitmap.bit / 8) * 8 / bitmap.bit;\n  var andLine = toDividableBy4(width / 8) * 8;\n  var dataOffset = function dataOffset(w, h) {\n    return ((height - h - 1) * width + w) * 4;\n  };\n  for (var h = 0; h < height; h++) {\n    for (var w = 0; w < width; w++) {\n      var index = h * xorLine + w;\n      var color = bitmap.colors[xor[index]];\n      data.set([color[2], color[1], color[0], and[h * andLine + w] ? 0 : 255], dataOffset(w, h));\n    }\n  }\n  return {\n    data: data,\n    height: height,\n    width: width\n  };\n};\n\n/**\n * Get imageData\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nvar getImageData = function getImageData(bitmap) {\n  if (bitmap.bit === 32) {\n    return getImageData32bit(bitmap);\n  } else if (bitmap.bit === 24) {\n    return getImageData24bit(bitmap);\n  }\n  return getImageDataPalette(bitmap);\n};\n\nmodule.exports = getImageData;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Check the ArrayBuffer is valid CUR.\n * @access private\n * @param {ArrayBuffer} arrayBuffer ArrayBuffer object\n * @returns {Boolean} arg is CUR or not\n */\n\nvar isCUR = function isCUR(arrayBuffer) {\n  if (!(arrayBuffer instanceof ArrayBuffer)) {\n    return false;\n  }\n  var dataView = new DataView(arrayBuffer);\n  return dataView.getUint16(0, true) === 0 && dataView.getUint16(2, true) === 2;\n};\n\nmodule.exports = isCUR;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Check the ArrayBuffer is valid PNG.\n * @access private\n * @param {ArrayBuffer} arrayBuffer ArrayBuffer object\n * @returns {Boolean} arg is PNG or not\n */\n\nvar isPNG = function isPNG(arrayBuffer) {\n  if (!(arrayBuffer instanceof ArrayBuffer)) {\n    return false;\n  }\n  var dataView = new DataView(arrayBuffer);\n  return dataView.getUint32(0, false) === 0x89504E47 && dataView.getUint32(4, false) === 0x0D0A1A0A;\n};\n\nmodule.exports = isPNG;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bitArray = __webpack_require__(2);\nvar range = __webpack_require__(4);\nvar toDividableBy4 = __webpack_require__(5);\nvar getImageData = __webpack_require__(11);\n\n/**\n * Parse bitmap\n * @access private\n * @param {Number} width bitmap width\n * @param {Number} height bitmap height\n * @param {ArrayBuffer} arrayBuffer bitmap buffer\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Number} imageData.bit image bit depth\n * @returns {Uint8ClampedArray} imageData.data xor image\n */\nvar parseBMP = function parseBMP(width, height, arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n\n  var headerSize = dataView.getUint32(0, true);\n  var bit = dataView.getUint16(14, true);\n  var colorsCount = dataView.getUint32(32, true);\n  if (colorsCount === 0 && bit <= 8) {\n    colorsCount = 1 << bit;\n  }\n  var xorOffset = headerSize + colorsCount * 4;\n  var andOffset = xorOffset + toDividableBy4(width * bit / 8) * height;\n\n  var bitmap = {\n    and: arrayBuffer.slice(andOffset, andOffset + toDividableBy4(width / 8) * height),\n    bit: bit,\n    colors: range(colorsCount).map(function (index) {\n      var length = 4;\n      var offset = headerSize + index * length;\n      return bitArray.of8(arrayBuffer.slice(offset, offset + length));\n    }),\n    height: height,\n    width: width,\n    xor: arrayBuffer.slice(xorOffset, andOffset)\n  };\n  return Object.assign(getImageData(bitmap), { bit: bit });\n};\n\nmodule.exports = parseBMP;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar bufferToArrayBuffer = __webpack_require__(3);\nvar bitDepthOfPNG = __webpack_require__(8);\nvar isCUR = __webpack_require__(12);\nvar isICO = __webpack_require__(1);\nvar isPNG = __webpack_require__(13);\nvar parseBMP = __webpack_require__(14);\nvar range = __webpack_require__(4);\n\n/**\n * Parse ICO and return some image object.\n * @access private\n * @param {ArrayBuffer|Buffer} buffer ICO file data.\n * @param {String} mime MIME type for output.\n * @param {Object} Image Image encoder/decoder\n * @returns {Promise<Object[]>} Resolves to array of parsed ICO.\n *   * `width` **Number** - Image width.\n *   * `height` **Number** - Image height.\n *   * `bit` **Number** - Image bit depth.\n *   * `buffer` **ArrayBuffer** - Image buffer.\n */\nvar parseICO = function parseICO(buffer, mime, Image) {\n  var arrayBuffer = bufferToArrayBuffer(buffer);\n  if (!arrayBuffer) {\n    return Promise.reject(new TypeError('\"buffer\" argument must be a Buffer or ArrayBuffer'));\n  }\n  if (!isCUR(arrayBuffer) && !isICO(arrayBuffer)) {\n    return Promise.reject(new Error('buffer is not ico'));\n  }\n  var dataView = new DataView(arrayBuffer);\n\n  var count = dataView.getUint16(4, true);\n  var infoHeaders = range(count).map(function (index) {\n    var length = 16;\n    var offset = 6 + index * length;\n    return arrayBuffer.slice(offset, offset + length);\n  });\n  var iconImages = range(count).map(function (index) {\n    var infoHeader = new DataView(infoHeaders[index]);\n    var length = infoHeader.getUint32(8, true);\n    var offset = infoHeader.getUint32(12, true);\n    return arrayBuffer.slice(offset, offset + length);\n  });\n  var parseIconImage = function parseIconImage(width, height, iconImage) {\n    if (isPNG(iconImage)) {\n      var bit = bitDepthOfPNG(iconImage);\n      return Image.decode(iconImage).then(function (imageData) {\n        return Object.assign(imageData, { bit: bit });\n      });\n    }\n    return Promise.resolve(parseBMP(width, height, iconImage));\n  };\n  var icos = range(count).map(function (index) {\n    var infoHeader = new DataView(infoHeaders[index]);\n    var width = infoHeader.getUint8(0) || 256;\n    var height = infoHeader.getUint8(1) || 256;\n    return parseIconImage(width, height, iconImages[index]).then(function (imageData) {\n      if (isCUR(arrayBuffer)) {\n        imageData.hotspot = {\n          x: infoHeader.getUint16(4, true),\n          y: infoHeader.getUint16(6, true)\n        };\n      }\n      return Image.encode(imageData, mime).then(function (imageBuffer) {\n        var image = Object.assign({ buffer: imageBuffer }, imageData);\n        delete image.data;\n        return image;\n      });\n    });\n  });\n  return Promise.all(icos);\n};\n\nmodule.exports = parseICO;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(16)\nvar ieee754 = __webpack_require__(18)\nvar isArray = __webpack_require__(19)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// ico.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3682cdec1e62df6adea1","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nconst bufferToArrayBuffer = require('./utils/buffer-to-arraybuffer');\n\n/**\n * Check the ArrayBuffer is valid ICO.\n * @memberof ICO\n * @param {ArrayBuffer|Buffer} buffer ICO file data.\n * @returns {Boolean} True if arg is ICO.\n */\nconst isICO = buffer => {\n  const arrayBuffer = bufferToArrayBuffer(buffer);\n  if (!arrayBuffer) {\n    return false;\n  }\n  const dataView = new DataView(arrayBuffer);\n  return dataView.getUint16(0, true) === 0 && dataView.getUint16(2, true) === 1;\n};\n\nmodule.exports = isICO;\n\n\n\n// WEBPACK FOOTER //\n// ./src/is-ico.js","'use strict';\n\nconst bitArray = {\n  /**\n   * Convert ArrayBuffer to 1bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of1 (buffer) {\n    const buff = new Uint8Array(buffer);\n    let bit = '';\n    for (let i = 0; i < buff.byteLength; i++) {\n      bit += `000000000${buff[i].toString(2)}`.slice(-8);\n    }\n    return bit.split('').map(el => parseInt(el, 2));\n  },\n  /**\n   * Convert ArrayBuffer to 4bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of4 (buffer) {\n    const buff = new Uint8Array(buffer);\n    let bit = '';\n    for (let i = 0; i < buff.byteLength; i++) {\n      bit += `00${buff[i].toString(16)}`.slice(-2);\n    }\n    return bit.split('').map(el => parseInt(el, 16));\n  },\n  /**\n   * Convert ArrayBuffer to 8bit Array\n   * @access private\n   * @param {ArrayBuffer} buffer buffer\n   * @returns {Array} bits array\n   */\n  of8 (buffer) {\n    const buff = new Uint8Array(buffer);\n    return Array.from(buff);\n  }\n};\n\nmodule.exports = bitArray;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/bit-array.js","'use strict';\n\nconst bufferToArrayBuffer = buffer => {\n  if (Buffer.isBuffer(buffer)) {\n    return new Uint8Array(buffer).buffer;\n  }\n  if (ArrayBuffer.isView(buffer)) {\n    return buffer.buffer;\n  }\n  if (buffer instanceof ArrayBuffer) {\n    return buffer;\n  }\n  return false;\n};\n\nmodule.exports = bufferToArrayBuffer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/buffer-to-arraybuffer.js","'use strict';\n\nconst range = n => new Array(n).fill(0).map((_, i) => i);\n\nmodule.exports = range;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/range.js","'use strict';\n\n/**\n * Make number dividable by 4\n * @access private\n * @param {Number} num number\n * @returns {Number} number dividable by 4\n */\nconst toDividableBy4 = num => {\n  const rest = num % 4;\n  return num % 4 === 0 ? num : num + 4 - rest;\n};\n\nmodule.exports = toDividableBy4;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/to-dividable-by-4.js","'use strict';\n\nmodule.exports = require('../is-ico');\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/is-ico.js","'use strict';\n\nconst Image = require('./image');\nconst parseICO = require('../parse-ico');\n\nconst parse = (arrayBuffer, mime) => parseICO(arrayBuffer, mime, Image);\n\nmodule.exports = parse;\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/parse.js","'use strict';\n\nconst bitDepthOfPNG = arrayBuffer => {\n  const dataView = new DataView(arrayBuffer);\n  const bit = dataView.getUint8(24);\n  const colorType = dataView.getUint8(25);\n  if (colorType === 2) {\n    return bit * 3;\n  } else if (colorType === 4) {\n    return bit * 2;\n  } else if (colorType === 6) {\n    return bit * 4;\n  }\n  return bit;\n};\n\nmodule.exports = bitDepthOfPNG;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bit-depth-of-png.js","'use strict';\n\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nconst Image = {\n  /**\n   * Create imageData from image\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer image buffer\n   * @returns {ImageData} imageData\n   */\n  decode (arrayBuffer) {\n    return new Promise(resolve => {\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const width = img.naturalWidth;\n        const height = img.naturalHeight;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const imageData = ctx.getImageData(0, 0, width, height);\n        resolve({\n          width: imageData.width,\n          height: imageData.height,\n          data: imageData.data\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data\n   * @access private\n   * @param {Object} image data\n   * @param {Number} image.width img width\n   * @param {Number} image.height img height\n   * @param {Uint8ClampedArray} image.data same as imageData.data\n   * @param {String} [mime=image/png] MIME type\n   * @returns {ArrayBuffer} image\n   */\n  encode (image, mime) {\n    return new Promise(resolve => {\n      const data = image.data;\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(image.width, image.height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime || 'image/png')));\n    });\n  }\n};\n\nmodule.exports = Image;\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/image.js","'use strict';\n\n\nconst isICO = require('./is-ico');\nconst parse = require('./parse');\n\nconst globalICO = global.ICO;\n\nconst ICO = {\n  isICO,\n  /**\n   * No conflict.\n   * @memberof ICO\n   * @returns {ICO} `ICO` Object.\n   */\n  noConflict () {\n    global.ICO = globalICO;\n    return this;\n  },\n  parse\n};\n\nmodule.exports = ICO;\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/index.js","'use strict';\n\nconst bitArray = require('./utils/bit-array');\nconst toDividableBy4 = require('./utils/to-dividable-by-4');\n\n/**\n * Get imageData of 24bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nconst getImageData24bit = bitmap => {\n  const width = bitmap.width;\n  const height = bitmap.height;\n  const data = new Uint8ClampedArray(width * height * 4);\n\n  const xor = new Uint8Array(bitmap.xor);\n  const and = bitArray.of1(bitmap.and);\n  const bytepp = bitmap.bit / 8;\n  const xorLine = toDividableBy4(width * bytepp);\n  const andLine = toDividableBy4(width / 8) * 8;\n  const dataOffset = (w, h) => (((height - h - 1) * width) + w) * 4;\n  for (let h = 0; h < height; h++) {\n    for (let w = 0; w < width; w++) {\n      const index = (h * xorLine) + (w * bytepp);\n      data.set([\n        xor[index + 2],\n        xor[index + 1],\n        xor[index],\n        and[(h * andLine) + w] ? 0 : 255\n      ], dataOffset(w, h));\n    }\n  }\n  return {\n    data,\n    height,\n    width\n  };\n};\n\n/**\n * Get imageData of 32bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nconst getImageData32bit = bitmap => {\n  const width = bitmap.width;\n  const height = bitmap.height;\n  const data = new Uint8ClampedArray(width * height * 4);\n\n  const xor = new Uint8Array(bitmap.xor);\n  const hasAlpha = !bitArray.of8(xor)\n    .every((n, index) => {\n      if ((index + 1) % 4 === 0) {\n        return n === 0; // A\n      }\n      return true; // RGB\n    });\n  const and = bitArray.of1(bitmap.and);\n  const bytepp = bitmap.bit / 8;\n  const xorLine = toDividableBy4(width * bytepp);\n  const andLine = toDividableBy4(width / 8) * 8;\n  const dataOffset = (w, h) => (((height - h - 1) * width) + w) * 4;\n  for (let h = 0; h < height; h++) {\n    for (let w = 0; w < width; w++) {\n      const index = (h * xorLine) + (w * bytepp);\n      data.set([\n        xor[index + 2],\n        xor[index + 1],\n        xor[index],\n        hasAlpha ? xor[index + 3] : and[(h * andLine) + w] ? 0 : 255 // eslint-disable-line no-nested-ternary\n      ], dataOffset(w, h));\n    }\n  }\n  return {\n    data,\n    height,\n    width\n  };\n};\n\n/**\n * Get imageData of 1, 4, 8bit bitmap\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nconst getImageDataPalette = bitmap => {\n  const width = bitmap.width;\n  const height = bitmap.height;\n  const data = new Uint8ClampedArray(width * height * 4);\n\n  const xor = bitArray[`of${bitmap.bit}`](bitmap.xor);\n  const and = bitArray.of1(bitmap.and);\n  const xorLine = toDividableBy4(width * bitmap.bit / 8) * 8 / bitmap.bit;\n  const andLine = toDividableBy4(width / 8) * 8;\n  const dataOffset = (w, h) => (((height - h - 1) * width) + w) * 4;\n  for (let h = 0; h < height; h++) {\n    for (let w = 0; w < width; w++) {\n      const index = (h * xorLine) + w;\n      const color = bitmap.colors[xor[index]];\n      data.set([\n        color[2],\n        color[1],\n        color[0],\n        and[(h * andLine) + w] ? 0 : 255\n      ], dataOffset(w, h));\n    }\n  }\n  return {\n    data,\n    height,\n    width\n  };\n};\n\n/**\n * Get imageData\n * @access private\n * @param {Object} bitmap bitmap object\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Uint8ClampedArray} imageData.data image data\n */\nconst getImageData = bitmap => {\n  if (bitmap.bit === 32) {\n    return getImageData32bit(bitmap);\n  } else if (bitmap.bit === 24) {\n    return getImageData24bit(bitmap);\n  }\n  return getImageDataPalette(bitmap);\n};\n\nmodule.exports = getImageData;\n\n\n\n// WEBPACK FOOTER //\n// ./src/get-image-data.js","'use strict';\n\n/**\n * Check the ArrayBuffer is valid CUR.\n * @access private\n * @param {ArrayBuffer} arrayBuffer ArrayBuffer object\n * @returns {Boolean} arg is CUR or not\n */\nconst isCUR = arrayBuffer => {\n  if (!(arrayBuffer instanceof ArrayBuffer)) {\n    return false;\n  }\n  const dataView = new DataView(arrayBuffer);\n  return dataView.getUint16(0, true) === 0 && dataView.getUint16(2, true) === 2;\n};\n\nmodule.exports = isCUR;\n\n\n\n// WEBPACK FOOTER //\n// ./src/is-cur.js","'use strict';\n\n/**\n * Check the ArrayBuffer is valid PNG.\n * @access private\n * @param {ArrayBuffer} arrayBuffer ArrayBuffer object\n * @returns {Boolean} arg is PNG or not\n */\nconst isPNG = arrayBuffer => {\n  if (!(arrayBuffer instanceof ArrayBuffer)) {\n    return false;\n  }\n  const dataView = new DataView(arrayBuffer);\n  return dataView.getUint32(0, false) === 0x89504E47 && dataView.getUint32(4, false) === 0x0D0A1A0A;\n};\n\nmodule.exports = isPNG;\n\n\n\n// WEBPACK FOOTER //\n// ./src/is-png.js","'use strict';\n\nconst bitArray = require('./utils/bit-array');\nconst range = require('./utils/range');\nconst toDividableBy4 = require('./utils/to-dividable-by-4');\nconst getImageData = require('./get-image-data');\n\n/**\n * Parse bitmap\n * @access private\n * @param {Number} width bitmap width\n * @param {Number} height bitmap height\n * @param {ArrayBuffer} arrayBuffer bitmap buffer\n * @returns {Object} imageData imageData of bitmap\n * @returns {Number} imageData.width image width\n * @returns {Number} imageData.height image height\n * @returns {Number} imageData.bit image bit depth\n * @returns {Uint8ClampedArray} imageData.data xor image\n */\nconst parseBMP = (width, height, arrayBuffer) => {\n  const dataView = new DataView(arrayBuffer);\n\n  const headerSize = dataView.getUint32(0, true);\n  const bit = dataView.getUint16(14, true);\n  let colorsCount = dataView.getUint32(32, true);\n  if (colorsCount === 0 && bit <= 8) {\n    colorsCount = 1 << bit;\n  }\n  const xorOffset = headerSize + (colorsCount * 4);\n  const andOffset = xorOffset + (toDividableBy4(width * bit / 8) * height);\n\n  const bitmap = {\n    and: arrayBuffer.slice(andOffset, andOffset + (toDividableBy4(width / 8) * height)),\n    bit,\n    colors: range(colorsCount)\n      .map(index => {\n        const length = 4;\n        const offset = headerSize + (index * length);\n        return bitArray.of8(arrayBuffer.slice(offset, offset + length));\n      }),\n    height,\n    width,\n    xor: arrayBuffer.slice(xorOffset, andOffset)\n  };\n  return Object.assign(getImageData(bitmap), { bit });\n};\n\nmodule.exports = parseBMP;\n\n\n\n// WEBPACK FOOTER //\n// ./src/parse-bmp.js","'use strict';\n\nconst bufferToArrayBuffer = require('./utils/buffer-to-arraybuffer');\nconst bitDepthOfPNG = require('./bit-depth-of-png');\nconst isCUR = require('./is-cur');\nconst isICO = require('./is-ico');\nconst isPNG = require('./is-png');\nconst parseBMP = require('./parse-bmp');\nconst range = require('./utils/range');\n\n/**\n * Parse ICO and return some image object.\n * @access private\n * @param {ArrayBuffer|Buffer} buffer ICO file data.\n * @param {String} mime MIME type for output.\n * @param {Object} Image Image encoder/decoder\n * @returns {Promise<Object[]>} Resolves to array of parsed ICO.\n *   * `width` **Number** - Image width.\n *   * `height` **Number** - Image height.\n *   * `bit` **Number** - Image bit depth.\n *   * `buffer` **ArrayBuffer** - Image buffer.\n */\nconst parseICO = (buffer, mime, Image) => {\n  const arrayBuffer = bufferToArrayBuffer(buffer);\n  if (!arrayBuffer) {\n    return Promise.reject(new TypeError('\"buffer\" argument must be a Buffer or ArrayBuffer'));\n  }\n  if (!isCUR(arrayBuffer) && !isICO(arrayBuffer)) {\n    return Promise.reject(new Error('buffer is not ico'));\n  }\n  const dataView = new DataView(arrayBuffer);\n\n  const count = dataView.getUint16(4, true);\n  const infoHeaders = range(count)\n    .map(index => {\n      const length = 16;\n      const offset = 6 + (index * length);\n      return arrayBuffer.slice(offset, offset + length);\n    });\n  const iconImages = range(count)\n    .map(index => {\n      const infoHeader = new DataView(infoHeaders[index]);\n      const length = infoHeader.getUint32(8, true);\n      const offset = infoHeader.getUint32(12, true);\n      return arrayBuffer.slice(offset, offset + length);\n    });\n  const parseIconImage = (width, height, iconImage) => {\n    if (isPNG(iconImage)) {\n      const bit = bitDepthOfPNG(iconImage);\n      return Image.decode(iconImage).then(imageData => Object.assign(imageData, { bit }));\n    }\n    return Promise.resolve(parseBMP(width, height, iconImage));\n  };\n  const icos = range(count)\n    .map(index => {\n      const infoHeader = new DataView(infoHeaders[index]);\n      const width = infoHeader.getUint8(0) || 256;\n      const height = infoHeader.getUint8(1) || 256;\n      return parseIconImage(width, height, iconImages[index])\n        .then(imageData => {\n          if (isCUR(arrayBuffer)) {\n            imageData.hotspot = {\n              x: infoHeader.getUint16(4, true),\n              y: infoHeader.getUint16(6, true)\n            };\n          }\n          return Image.encode(imageData, mime)\n            .then(imageBuffer => {\n              const image = Object.assign({ buffer: imageBuffer }, imageData);\n              delete image.data;\n              return image;\n            });\n        });\n    });\n  return Promise.all(icos);\n};\n\nmodule.exports = parseICO;\n\n\n\n// WEBPACK FOOTER //\n// ./src/parse-ico.js","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 16\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 17\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 18\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}